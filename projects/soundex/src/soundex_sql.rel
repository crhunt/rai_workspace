// Split the string
@inline
def split_string[S] = n, substring[S,n,n]
	from n in range[1,num_chars[S],1]

// Sound replacement rules
def soundex_replace =
	{ ({"b"; "f"; "p"; "v";}, "1");
      ({"c"; "g"; "j"; "k"; "q"; "s"; "x"; "z";}, "2");
      ({"d";"t";}, "3");
      ("l", "4");
      ({"m";"n";}, "5");
      ("r", "6");
      ({"a"; "e"; "i"; "o"; "u"; "y";}, "0"); } // Not sure about y

// Keep first letter
@inline
def soundex_list[S] = 0, uppercase[substring[S,1,1]]
// Replace letters with sound encoding, drop letters without replacements
@inline
def soundex_list[S](m,vv) = sort[n,v: soundex_replace[ split_string[ lowercase[S]][n] ](v) ](m,nn,vv) from nn

// Special rules for first 2 letters: if 2nd letter matches 1st letter's sound, drop it
@inline
def soundex_filter_1[R][S](n,v) = 
	R[S](n,v) and
	not {1; 2;}(n)
@inline
def soundex_filter_1[R][S](n,v) =
	R[S](n,v) and
	not R[S](n-1,v) and
	n = 2

// Remaining rules
@inline
def soundex_filter[R][S](n,v) =
	soundex_filter_1[R][S](n,v) and
    not soundex_filter_1[R][S](n-1,v) and // No adjacent numbers the same
	not v = "0" // No vowels

/**********/

// Join string and pad with zeros
@inline
def soundex[S] = substring[ concat[ string_join["", soundex_filter[soundex_list][S]], "000"], 1, 4 ]

def test_strings = 
	{ ("Robert", "R163");
      ("Rupert", "R163");
      ("Rubin", "R150");
      ("Ashcroft", "A261");
      ("Ashcraft", "A261");
      ("Tymczak", "T522");
      ("Pfister", "P236");
      ("Honeyman", "H555"); }

//def test_strings = {("Ashcraft", "A261");}

def test_output = name, answer, result
	from name, answer, result where
	test_strings(name, answer) and
	result = soundex[name]