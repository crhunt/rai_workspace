/* How long between when an issue is created and when it is closed? */

// Overall

def issue_duration(issue,period) = 
    period = ( datetime_to_nanoseconds[closed_at[issue]] - 
               datetime_to_nanoseconds[created_at[issue]] ) / (3600 * 1e9 * 24)

def mean_duration(label_id,mean_period) = 
    mean_period = mean[issue, period: issue_duration(issue, period) and
                                      has_label(issue,label_id) and
                                      label(label_id)]

def stddev_duration(label_id, variance) = 
    variance = pop_stddev[issue, period: issue_duration(issue, period) and
                                         has_label(issue,label_id) and
                                         label(label_id)]

def display_mean_duration(name,mean_period, stddev_period) =
    mean_duration(label_id,mean_period) and
    stddev_duration(label_id,stddev_period) and
    has_name(label_id,name) and
    has_occurred[label_id] >= 5
    from label_id

// Look at shorter lived issues

def issue_duration_1Q(issue,period) = 
    issue_duration(issue,period) and
    period < 90

def mean_duration_1Q(label_id,mean_period) = 
    mean_period = mean[issue, period: issue_duration_1Q(issue, period) and
                                      has_label(issue,label_id) and
                                      label(label_id)]

def stddev_duration_1Q(label_id, variance) = 
    variance = pop_stddev[issue, period: issue_duration_1Q(issue, period) and
                                         has_label(issue,label_id) and
                                         label(label_id)]

def display_mean_duration_1Q(name,mean_period, stddev_period) =
    mean_duration_1Q(label_id,mean_period) and
    stddev_duration_1Q(label_id,stddev_period) and
    has_name(label_id,name) and
    has_occurred[label_id] >= 5
    from label_id

/* Frequency of labels */

def has_occurred(label_id, cnt) =
    cnt = count[issue: has_label(issue,label_id)]

def has_occurred_1Q(label_id, cnt, frac) =
    cnt = count[issue: has_label(issue,label_id) and issue_duration_1Q(label_id,_)] and
    frac = cnt/has_occurred[label_id]

/* How long between when a PR is created and when it is merged? */


/* Model Design */

/* Link id's to names */

// Issue labels
def has_name(label,name) = json_label(label, :name, name)

// Issue titles
def has_name = user_login.login_name

/* label groups */

@inline
def string_to_label_group(rs,l) =
    label_name(l, n) and
    regex_match(rs, n)
    from n

def component_label(l) = string_to_label_group("^component",l)
def complexity_label(l) = string_to_label_group("^complexity",l)
def customer_label(l) = string_to_label_group("^customer",l)
def feature_label(l) = string_to_label_group("^feature",l)
def impl_label(l) = string_to_label_group("^impl",l)
def type_label(l) = string_to_label_group("^type",l)