/*****
 * Define schema for repositories
 */

module repository
    // Date attributes
    def created_at[r] = parse_iso_datetime[json_repo[r, :created_at]]
    def updated_at[r] = parse_iso_datetime[json_repo[r, :updated_at]]
    def pushed_at[r] = parse_iso_datetime[json_repo[r, :pushed_at]]

    // User attributes
    def owner[r] = has_user_id[ json_repo[r, :owner, :node_id] ]
    def organization[r](v) =
        has_user_id[ json_repo[r, attr, :node_id] ](v) 
        and { :organization }(attr)
        from attr
    /*def organization[r](v) = 
        has_user_id[ json_repo[r, :organization, :node_id] ](v) 
        or 
        not json_repo[r, :organization, :node_id](_) and
        has_user_id[ json_repo[r, :owner, :node_id] ](v) */
end

// Repository attributes, pulled directly from GhApi json.
def repository:has[attr](r,v) = json_repo[r,attr](v)
    and supported_attributes:repo(attr)

// Permissions includes booleans --> :admin, :maintain, :push, :triage, :pull
def repository:has:permissions[attr][r] = json_repo[r][:permissions][attr]

/**
  These attributes we can include directly. Attributes not included here require
  data transformation first to include in the model. For example, dates require parsing and 
  owner should be encoded as a User.
  */
def supported_attributes:repo = attr
    from r,attr,v where json_repo(r,attr,v) and
    not { :id;
          :node_id;
          :owner;
          :license;
          :organization;
          :created_at;
          :updated_at;
          :pushed_at; }(attr)
