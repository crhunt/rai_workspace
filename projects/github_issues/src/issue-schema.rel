/*****
 * Mapping github issues data to a schema
 */

/*****
 * github_issue: Common relations for issues and pull requests
 */

// Attributes

def github_issue:has[attr](gi,v) = json_issue[gi,attr](v)
    and supported_attributes:github_issue(attr)

def github_issue:open(gi) = github_issue:has:state(gi, "open")
def github_issue:closed(gi) = github_issue:has:state(gi, "closed")

// User involvement
def github_issue:author[gi] =
        has_user_id[ json_issue[gi, :user, :node_id] ]

def github_issue:assignee[gi] =
        has_user_id[ json_issue[gi, :assignees, :[], _, :node_id] ]


module github_issue
    
    // Dates
    def created_at[gi] = parse_iso_datetime[json_issue[gi, :created_at]]
    def closed_at[gi] = parse_iso_datetime[issue_closed_at_string[gi]]
    // Milestones
    def milestone[gi] =
        has_milestone_id[ json_issue[gi, :milestone, :node_id] ]
    // Labels
    def label[gi] =
        has_label_id[ json_issue[gi, :labels, :[], _, :node_id] ]
    def label_category[cat](gi,v) = 
        label:in[cat][ github_issue:label[gi] ](v)
    def in_category[cat](gi) = 
        label:in[cat][ github_issue:label[gi] ](_)
    // Belongs to repo
    def in_repo(lb,r) = regex_match(s, json_issue[lb,:url]) and 
        repository:has:fullname(r,s)
        from s
    
    // Calculated properties
    def duration[gi] = issue_duration[gi]

end

// Issue duration calculation

def issue_duration[gi] = ( datetime_to_nanoseconds[github_issue:closed_at[gi]] - 
                           datetime_to_nanoseconds[github_issue:created_at[gi]] ) / (3600 * 1e9 * 24)

@inline
def filter_by_duration[FILTER](limit,gi) = issue_duration(gi,period)
    and period < limit and FILTER(gi)
    from period

/*****
 * GitHub issues are either pull requests or issues
 */

/**
 * Pull requests
 */

def PullRequest(pr) =
    exists(json_issue[pr, :pull_request])

/**
 * Issues (not pull requests)
 */

def Issue(gi) =
    GithubIssue(gi) and
    not PullRequest(gi)


// Internal use only
// We're replacing null with empty string as a workaround for an open issue.
def issue_closed_at_string(x, s) =
    json_issue(x, :closed_at, s) and s != ""

/**
 * Temporal open pull requests
 */

def pr_relevant_date(dt) = exists(p: PullRequest(p) and github_issue:created_at(p, dt))
def pr_relevant_date(dt) = exists(p: PullRequest(p) and github_issue:closed_at(p, dt))

def open_pull_request_count_later_closed[dt in pr_relevant_date] =
    count[p: PullRequest(p) and github_issue:created_at[p] <= dt < github_issue:closed_at[p]]

def open_pull_request_count_still_open[dt in pr_relevant_date] =
    count[p: PullRequest(p) and github_issue:created_at[p] <= dt and github_issue:open(p)]

def open_pull_request_count[dt in pr_relevant_date] =
    (open_pull_request_count_later_closed[dt] <++ 0) + 
    (open_pull_request_count_still_open[dt] <++ 0)

/**
  These attributes we can include directly. Attributes not included here require
  data transformation first to include in the model. For example, dates require parsing.
  */

def supported_attributes:github_issue = attr
    from u,attr,v where json_issue(u,attr,v) and
    not { :created_at;
          :updated_at;
          :closed_at;
          :id;
          :node_id;
          :user;
          :labels;
          :milestone;
          :reactions; }(attr)