/*****
 * Define schema for labels
 */

// Label repository
def label:in_repo(lb,r) = regex_match(s, json_label[lb,:url]) and 
    repository:has:fullname(r,s)
    from s

// Label attributes 
def label:has[attr](lb,v) = json_label[lb,attr](v)
    and supported_attributes:label(attr)

// Issues with label
def label:tagged_in(lb,gi) =
        has_label_id[ json_issue[gi, :labels, :[], _, :node_id] ](lb)

// Label categories 
def label:in[cat][lb] = has_label_category[cat][lb]
/* Need better relname support
def label:in[attr][lb] = has_label_category[cat][lb]
    from cat where
    category_relname(attr,cat)*/

def label:category_string[attr] = category_relname[attr]

// How long between when an issue is created and when it is closed?
// FILTER can take values Issue, PullRequest, GithubIssue
// TO DO: minimal issue around why ...
//        query(current_conn,"""def myoutput(lb,v) = label:duration:agg[Issue][mean](lb,v)""",outputs=[:myoutput]) works, but
//        query(current_conn,"""def myoutput = label:duration:agg[Issue][mean]""",outputs=[:myoutput]) aborts
@inline
def label:duration:agg[FILTER,AGG][lb] = label_duration[FILTER,AGG][lb]
// Doesn't work with relnames yet, use label_duration_period
@inline
def label:duration:period[FILTER,AGG][p] = label_duration_period[FILTER,AGG][p]
@inline
def label:duration:percentile[FILTER][p][lb] = label_duration_percentile[FILTER][p][lb]

// How frequently does a label occur?
def label:count:all[lb] = count[gi: github_issue:label(gi,lb)]
// Doesn't work with relnames yet, use label_count_period
@inline
def label:count:period[p][lb] = label_count_period[p][lb]


/*** Label attributes ***/

/**
  These attributes we can include directly.
  */
def supported_attributes:label = attr
    from lb,attr,v where json_repo(lb,attr,v) and
    not { :id;
          :node_id; }(attr)

/*** Label categories ***/

/* Parse label name */

// Get label categories, designated by a split character in the label name

def label_split_char = ':'

def regex_label_split_char = string_join[ "|", sort[string[label_split_char]] ]

// We want cat as a relname.
def has_label_category[cat][lb] = substring[label_string, ind+1, num_chars[label_string]]
    from label_string, ind, spl_char where
    cat = substring[label_string,1,ind-1] and
    label_string = json_label[lb,:name] and // Not using label:name due to error
    label_split_char(spl_char) and
    char(label_string,ind,spl_char) and
    not regex_match[regex_label_split_char, substring[label_string,1,ind-1]]

// This is a hack, hopefully relname_string will support conversion of any string to relname
def label_categories(cat) = has_label_category(cat,_,_)
def category_json_string = concat["{ \"", concat[s, "\": {} }"]] for s where label_categories(s)
def category_relname(c,s) = parse_json[ category_json_string[s] ](c)

/*** Label calculated properties ***/

/* Duration */

@inline
def label_duration[FILTER,AGG][lb](v) = 
    AGG[ gi, period: github_issue:duration(gi, period) and // github_issue:duration, issue_duration
                     github_issue:label(gi,lb) and // github_issue:label, issue_label
                     //GithubIssue(gi) and
                     //Label(lb) and
                     FILTER(gi) ](v)

@inline
def label_duration_period[FILTER,AGG][p] = 
    label_duration[ filter_by_duration[FILTER][p] ][AGG]

@inline
def label_duration_percentile[FILTER][p][lb] = ordered_by_duration[ label:tagged_in[lb] ][i,gi]
    from i,gi,cnt,float_i where
    cnt = count[ ordered_by_duration[ label:tagged_in[lb] ] ] and
    float_i = p*cnt/100 and
    i = float_int_convert[ round[:ROUND_NEAREST, float_i] ] and
    Label(lb) and
    FILTER(gi)

/* Count (Frequency) */

@inline
def label_count_period[p][lb] =
    count[gi: github_issue:label(gi,lb) and 
              filter_by_duration[GithubIssue][p](gi)]