/*****
 * Mapping github issues to a schema
 */

/*****
 * GitHub issues are either pull requests or issues
 */
def github_issue(x) =
    json_issue(x, :id, x)

/**
 * Pull requests
 */

ic { pull_request ⊆ github_issue }

def pull_request(x) =
    exists(json_issue[x, :pull_request])

/**
 * Issues (not pull requests)
 */

ic { issue ⊆ github_issue }

def issue(x) =
    json_issue(x, :id, x) and
    not pull_request(x)

/*****
 * Common
 */

def has_number[x] =
    json_issue[x, :number]

def has_issue_title[x] =
    json_issue[x, :title]

def has_title = has_issue_title

def has_url[x] =
    json_issue[x, :html_url]

def has_state[x] =
    json_issue[x, :state]

def open(x) =
    has_state(x, "open")

def closed(x) =
    has_state(x, "closed")

def created_at[x] =
    parse_iso_datetime[json_issue[x, :created_at]]

def closed_at[x] =
    parse_iso_datetime[closed_at_string[x]]

// We're replacing null with empty string as a workaround for an open issue.
def closed_at_string(x, s) =
    json_issue(x, :closed_at, s) and s != ""

def has_author(x, u) =
    json_issue(x, :user, :id, u)

def author = has_author[_]

def has_milestone(i, m) =
    json_issue(i, :milestone, :id, m)

def has_label(i, l) =
    json_issue(i, :labels, :[], _, :id, l)

def has_assignee(x, u) =
    json_issue(x, :assignees, :[], _, :id, u)

/*****
 * Users (currently collected from users that occur in issues)
 */
ic { user_login ⊆ (user, String) }

// users from the person who filed the issue
def user(x) =
    json_issue(_, :user, :id, x)

// users from assignees
def user(x) =
    json_issue(_, :assignees, :[], _, :id, x)

def user_login(x, s) =
    json_issue(i, :user, :id, x) and
    json_issue(i, :user, :login, s)
    from i

def user_login(x, s) =
    json_issue(i, :assignees, :[], j, :id, x) and
    json_issue(i, :assignees, :[], j, :login, s)
    from i, j

/*****
 * Labels (currently collected from labels that occur in issues)
 */

def label(x) =
    json_label(x, :id, x)

def label_name(l, s) =
    json_label(l, :name, s)

/*****
 * Milestones
 */

def milestone(x) =
    json_milestone(x, :id, x)

def milestone_title[x] =
    json_milestone[x, :title]

def has_title = milestone_title

/**
 * Temporal open pull requests
 */

def pr_relevant_date(dt) = exists(p: pull_request(p) and created_at(p, dt))
def pr_relevant_date(dt) = exists(p: pull_request(p) and closed_at(p, dt))

def open_pull_request_count_later_closed[dt in pr_relevant_date] =
    count[p: pull_request(p) and created_at[p] <= dt < closed_at[p]]

def open_pull_request_count_still_open[dt in pr_relevant_date] =
    count[p: pull_request(p) and created_at[p] <= dt and open(p)]

def open_pull_request_count[dt in pr_relevant_date] =
    (open_pull_request_count_later_closed[dt] <++ 0) + 
    (open_pull_request_count_still_open[dt] <++ 0)


/**
 * RAI account info
 */
//ic { forall(u where has_assignee(_, u): exists(user_name[u])) }

def ghost_user(u) =
    has_assignee(_,u) and not exists(user_name[u])

def user_name =
    user_login.login_name

def login_name =
    ("amirsh", "Amir");
    ("epasalic", "Emir Pasalic");
    ("larf311", "Trevor Paddock");
    ("mariabaladuggimpudi", "Bala");
    ("millerjoey", "Joe Miller");
    ("rodericpaulk", "Rod");
    ("vilterp", "Pete Vilter");
    ("dbalakri", "Darshana");
    ("dewilson", "Dana");
    ("mcmcgrath13", "Mary");
    ("samuelkolb", "Samuel");
    ("tsourolampis", "Babis");
    ("pabsts", "Stefan");
    ("remysucre", "Remy");
    ("NRHelmi", "Helmi");
    ("Liby99", "Ziyang");
    ("Sacha0", "Sacha");
    ("antoulas-rai", "Alex Ntoulas");
    ("rbvermaa", "Rob Vermaas");
    ("tomasrelai", "Tomas");
    ("tveldhui", "Todd Veldhuizen");
    ("Chakerbh", "Chaker");
    ("ntzia", "	Nikolaos Tziavelis");
    ("ElSeidy", "Mohammad ElSeidy");
    ("mdashti", "Mohammad Dashti");
    ("nystrom", "Nate Nystrom");
    ("janrous-rai", "Jan");
    ("rai-nhdaly", "Nathan Daly");
    ("hung-q-ngo", "Hung");
    ("eoxxs", "David Bach");
    ("comnik", "Niko");
    ("rgankema", "Richard Gankema");
    ("mabokhamis", "Mahmoud");
    ("li1", "Malte");
    ("rcurtin", "Ryan Curtin");
    ("mbravenboer", "Martin Bravenboer");
    ("hall-alex", "Alex Hall");
    ("geokollias", "George Kollias");
    ("muralipusala", "Murali");
    ("cliffclick", "Cliff Click");
    ("robbear", "Rob Bearman");
    ("Segflow", "Meher");
    ("AzamatB", "Azamat");
    ("sjbertolani", "Steve Bertolani");
    ("kurtStirewalt", "Kurt Stirewalt");
    ("jagrafft", "Jason");
    ("geokollias", "George");
    ("sharathjapa", "Sharath");
    ("azreika", "Abdul");
    ("Hoda-Moradi", "Hoda");
    ("yimin-rai", "Yimin");
    ("cfguerra", "Carlos");
    ("nassarhuda", "Huda");
    ("crhunt", "Cassi Hunt")
