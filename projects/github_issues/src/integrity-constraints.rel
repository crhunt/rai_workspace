/*****
 * Properties common to pull requests and issues
 */
// Constrain types for certain relations
ic { has_issue_title ⊆ (GithubIssue, String) }
ic { has_number ⊆ (GithubIssue, Int) }
ic { created_at ⊆ (GithubIssue, DateTime) }
ic { closed_at ⊆ (GithubIssue, DateTime) }
ic { has_login ⊆ (User, String) }
// Constrain value types
ic { has_state ⊆ (GithubIssue, {"open"; "closed"}) }
ic { has_label ⊆ (GithubIssue, Label) }
ic { has_author ⊆ (GithubIssue, User) }
ic { has_assignee ⊆ (GithubIssue, User) }
ic { pull_request ⊆ GithubIssue }
ic { issue ⊆ GithubIssue }
// All open and closed issues must be GithubIssues, and all GithubIssues must be
// either open or closed
ic { open ⊆ GithubIssue }
ic { closed ⊆ GithubIssue }
ic { forall(x in GithubIssue: closed(x) xor open(x)) }
// Make sure all users exist
ic { forall(u where has_assignee(_, u): exists(has_user_name[u])) }
// For each of these relations, there can be only one value per issue
ic { function(has_title) }
ic { function(has_number) }
ic { function(has_url) }
ic { function(has_state) }
ic { function(created_at) }
ic { function(closed_at) }

// ic { forall(x in closed: exists(dt: closed_at(x, dt)) }

/*****
 * Labels
 */

ic { has_label_name ⊆ (Label, String) }
ic { function(has_label_name) }

/*****
 * Milestones
 */
ic { milestone_title ⊆ (Milestone, String) }

/**
 * Temporal open pull requests
 */
ic { open_pull_request_count ⊆ (DateTime, Int) }